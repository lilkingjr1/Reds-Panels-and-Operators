/**
	Pilot Light (Stack) NL2 Script
	David Wolfe (Red-Thirten)
	03/14/2024
	Initializes the light stack's lights and animates the pilot lights during run time, based on user settings.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.Block;
import com.nolimitscoaster.SpecialTrack;
import com.nolimitscoaster.StaticSound;
import nlvm.math3d.Vector3f;

import obj.IndicatorLight;
import util.SceneObjectTools;
import util.CoasterTools;

public class PilotLightStack extends PilotLight{
	private static final String LIGHT2_ELEMENT_NAME = "light2";		// Name of the right pilot light element in the SCO/model
	private static final String LIGHT3_ELEMENT_NAME = "light3";		// Name of the bottom pilot light element in the SCO/model
	private static final Vector3f SPEAKER_LOCATION = new Vector3f(0.f, 0.75f, 0.f);	// Speaker position in the model/SCO, relative to the origin
		
	// All Light Stack specific Functions:
	private static final int F_STATIC = 0;
	private static final int F_SPECIAL_TRACK = 99;

	private SpecialTrack specialTrack;
	private StaticSound soundEmergency;
	
	private IndicatorLight light2;
	private IndicatorLight light3;
	
	private bool soundPlayed = false;
	
	public bool onInit(){
		super.SCRIPT_NAME = "LightStack";		// Script name for debugging
		super.LIGHT_ELEMENT_NAME = "light1";	// Name of the top pilot light element in the SCO/model
		super.LIGHT_OBJECT_NAME = "light1";		// Name of the Scene Object Light
		
		// If PilotLight initialization succeeds, continue with self-initialization
		if(super.onInit()){
			// Create additional IndicatorLight objects
			light2 = new IndicatorLight(
				SceneObjectTools.getElementForName(sco, LIGHT2_ELEMENT_NAME, SCRIPT_NAME),
				SceneObjectTools.getLightForName(sco, LIGHT2_ELEMENT_NAME, SCRIPT_NAME),
				BLINK_INTERVAL,
				!sco.getBooleanParameter("disable_light").boolValue()
			);
			light3 = new IndicatorLight(
				SceneObjectTools.getElementForName(sco, LIGHT3_ELEMENT_NAME, SCRIPT_NAME),
				SceneObjectTools.getLightForName(sco, LIGHT3_ELEMENT_NAME, SCRIPT_NAME),
				BLINK_INTERVAL,
				!sco.getBooleanParameter("disable_light").boolValue()
			);

			// Gets and setup E-Stop sound from the parameters, if it exists
			soundEmergency = StaticSound.loadFromResource(
				sco.getResourcePathParameter("estop_sound"),
				StaticSound.FLAG_MIXDOWN_MONO
			);
			if (soundEmergency != null){
				Vector3f speakerLocation = sco.getTranslation(); // Get SCO origin posision
				speakerLocation.add(SPEAKER_LOCATION); // Add the speaker location translation
				soundEmergency.setPosition(speakerLocation); // Set the sound position to this new location
				soundEmergency.setDopplerMode(false);
			}
			
			// Function-specific checks and setup
			switch (func){
				case F_STATIC_BLINK: // None/Static
					return handleStaticFunc(
						new IndicatorLight[]{light, light2, light3},
						new String[]{"light1", "light2", "light3"}
					);
				case F_SPECIAL_TRACK:
					specialTrack = sco.getSpecialTrackParameter("special_track");
					if (specialTrack == null){
						log.err("The configured function requires the Special Track parameter to be specified.");
						return false;
					}
					break;
			}
			
			return true; // Everything's just dandy
		}
		else return false; // Oh noes! Everything's not dandy!
	}

	protected int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;

		int funcVal = sco.getIntegerParameter("function").intValue();
		switch (funcVal){
			case F_STATIC:
				return F_STATIC_BLINK; // Set to F_STATIC_BLINK to let init return true
			case 1: // Dispatch
				return F_DISPATCH;
			case 2: // Block Indicator
				return F_BLOCK_IND;
			case 3: // Special Track
				return F_SPECIAL_TRACK;
		}
		return funcVal; // Default
	}
	
	private bool handleStaticFunc(IndicatorLight[] lights, String[] paramNames){
		/* Handle Static Function
			Sets the lights' states, based on given static parameter names.
			Returns true if any of the lights were set to blink
			(so onNextFrame can be called).
		*/
		bool anyLightBlink = false;
		for (int i = 0; i < lights.length; i++){
			switch (sco.getIntegerParameter(paramNames[i]).intValue()){
				case 1:
					lights[i].lightOn();
					break;
				case 2:
					lights[i].lightBlink();
					anyLightBlink = true;
					break;
				default:
					lights[i].lightOff();
			}
		}
		return anyLightBlink;
	}
	
	private void handleDispatchFunc(){
		Train train = section.getTrainOnSection();
		// E-Stopped
		if (coaster.isEmergencyStop()){
			light.lightOff();
			light2.lightOff();
			light3.lightOn(); // Top light on
			 // Play E-Stop sound once, if set
			if (!soundPlayed && soundEmergency != null){
				soundEmergency.play();
				soundPlayed = true;
			}
		}
		// Full manual operation mode
		else if (coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_FULL_MANUAL){
			// All lights blink
			light.lightBlink();
			light2.lightBlink();
			light3.lightBlink();
		}
		// Train on section
		else if (train != null){
			// Train is moving
			if (train.getSpeed() != 0.0){
				light.lightOn(); // Bottom light on
				light2.lightOff();
				light3.lightOff();
			}
			// Train is in station
			else{
				// Blink top light if waiting for clear block
				if (section.isStationWaitingForClearBlock()){
					light3.lightBlink();
				}
				else{
					light3.lightOff();
				}

				// Middle light on if harness or gates are not closed
				if ( train.getHarnessState() != 0.f
						|| section.getStationGateState() != 0.f ){
					light.lightOff();
					light2.lightOn();
				}
				// Blink middle light if the station has a platform that needs to be lowered
				else if ( CoasterTools.isCoasterWithPlatform(coaster)
						&& section.getStationPlatformState() != 0.f ){
					light.lightOff();
					light2.lightBlink();
				}
				// Blink bottom light when ready to dispatch
				else{
					light.lightBlink();
					light2.lightOff();
				}
			}

			// Reset E-Stop sound when not in E-Stop
			if (soundPlayed){
				soundPlayed = false;
			}
		}
		// Train not on section
		else{
			// All lights off
			light.lightOff();
			light2.lightOff();
			light3.lightOff();
		}
	}
	
	private void handleBlockIndicatorFunc(){
		// E-Stopped
		if (coaster.isEmergencyStop()){
			light.lightOff();
			light2.lightOff();
			light3.lightOn(); // Top light on
			 // Play E-Stop sound once, if set
			if (!soundPlayed && soundEmergency != null){
				soundEmergency.play();
				soundPlayed = true;
			}
		}
		else{
			// Handle block states
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					light.lightOff();
					light2.lightOn();
					light3.lightOff();
					break;
				case Block.STATE_APPROACHING_FWD:
				case Block.STATE_APPROACHING_BWD:
					light.lightOff();
					light2.lightBlink();
					light3.lightOff();
					break;
				case Block.STATE_IDLE:
					light.lightOn();
					light2.lightOff();
					light3.lightOff();
					break;
				default:
					light.lightOff();
					light2.lightOff();
					light3.lightBlink();
			}
			
			// Reset E-Stop sound when not in E-Stop
			if (soundPlayed){
				soundPlayed = false;
			}
		}
	}
	
	private void handleSpecialTrackFunc(){
		// E-Stopped
		if (coaster.isEmergencyStop()){
			light.lightOff();
			light2.lightOff();
			light3.lightOn(); // Top light on
			 // Play E-Stop sound once, if set
			if (!soundPlayed && soundEmergency != null){
				soundEmergency.play();
				soundPlayed = true;
			}
		}
		else{
			// Bottom Light (Special Track can be manually moved)
			if (specialTrack.canChangeManualSwitchDirection()){
				light.lightOn();
			}
			else{
				light.lightOff();
			}

			// Middle Light (Train movement)
			Train train = section.getTrainOnSection();
			if (train != null && train.getSpeed() != 0.0){
				light2.lightBlink();
			}
			else{
				light2.lightOff();
			}

			// Top Light (Special Track movement)
			if (specialTrack.getVisibleSwitchState() % 1.f != 0.f){
				light3.lightBlink();
			}
			else{
				light3.lightOff();
			}
			
			// Reset E-Stop sound when not in E-Stop
			if (soundPlayed){
				soundPlayed = false;
			}
		}
	}

	public void onNextFrame(float tick){
		switch (func){
			case F_DISPATCH:
				handleDispatchFunc();
				break;
			case F_BLOCK_IND:
				handleBlockIndicatorFunc();
				break;
			case F_SPECIAL_TRACK:
				handleSpecialTrackFunc();
				break;
		}

		// Run IndicatorLight object's onNextFrame() as well to animate
		light.onNextFrame(tick);
		light2.onNextFrame(tick);
		light3.onNextFrame(tick);
		
		// If set to attach to special track, update translation of SCO
		if (specialTrackModule != null)
			specialTrackModule.updateTranslation();
	}
}