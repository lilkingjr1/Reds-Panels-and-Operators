/**
	Electrical Panel Initialization NL2 Script
	David Wolfe (Red-Thirten)
	7/27/2023
	Initializes the electrical panel's texture, mount, and electrical conduit based on user settings.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;

import util.SpecialTrackModule;

public class ElectricalPanel extends Script{
	protected String SCRIPT_NAME = "ElectricalPanel";	// Script name for debugging
	protected String PANEL_ELEMENT_NAME = "panel";		// Name of the panel element in the SCO/model
	protected String MOUNT_ELEMENT_NAME = "mount";		// Name of the mount element in the SCO/model
	protected String CONDUIT_ELEMENT_NAME = "pipe";		// Name of the conduit element in the SCO/model
	
	private static final String[] TEXTURES = {"brushed_metal", "rusty", "bumpy_metal"}; // Possible texture parameter names
	
	protected SpecialTrackModule specialTrackModule;
	
	public bool onInit(){ // On initialization of Play simulation
		// Get and assign local sco
		SceneObject sco = getScoFromParentEntity();
		// Set the texture chosen by the SCO parameters to the element by given name
		setTextureFromScoParams(sco, getElementOnScoForName(sco, PANEL_ELEMENT_NAME));
		
		if (sco.getBooleanParameter("hide_mount").boolValue()){ // Determine if the mount should be hidden
			getElementOnScoForName(sco, MOUNT_ELEMENT_NAME).setVisible(false);
		}
		if (sco.getBooleanParameter("hide_pipe").boolValue()){ // Determine if the pipe should be hidden
			getElementOnScoForName(sco, CONDUIT_ELEMENT_NAME).setVisible(false);
		}
		
		// If set to attach to special track, set up the module object for it
		if (sco.getSpecialTrackParameter("special_track") != null){
			specialTrackModule = new SpecialTrackModule(sco);
		}
		
		return true; // Everything's just dandy
	}
	
	protected SceneObject getScoFromParentEntity(){ // Returns the SceneObject via the parent entity ID with error handling
        SceneObject sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null){
            System.throwRuntimeException(SCRIPT_NAME + ": This script only works with NL2 scene objects");
        }
        return sco;
    }
	
	protected SceneObjectElement getElementOnScoForName(SceneObject sco, String name){ // Basically getElementForName() with error handling - Gratz to bestdani for idea
        SceneObjectElement element = sco.getElementForName(name);
        if (element == null){
            System.throwRuntimeException(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + name + "\" element)");
        }
        return element;
    }
	
	protected void setTextureFromScoParams(SceneObject sco, SceneObjectElement element){ // Sets the texture based on parameter choice
		Boolean curBool = null;
		
		for (int i = 0; i < TEXTURES.length; i++){ // For all the parameters
			curBool = sco.getBooleanParameter( TEXTURES[i] );
			if (curBool != null && curBool.boolValue()){ // Check if it exists, and if so, what's its setting
				element.setTextureAnimationIndex(i); // Set the texture
				return;
			}
		}
	}
	
	public void onNextFrame(float tick){
		if (specialTrackModule != null) specialTrackModule.setTranslation(); // If set to attach to special track, set translation of SCO
	}
}