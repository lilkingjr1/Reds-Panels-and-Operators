/**
	Pilot Light 4-Way NL2 Script
	David Wolfe (Red-Thirten)
	03/06/2024
	Extends Pilot Light. Handles additional lights' functionality.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Block;

import util.SceneObjectTools;

public class PilotLight4Way extends PilotLight{
	private static final String LIGHT2_ELEMENT_NAME = "light2";		// Name of the right pilot light element in the SCO/model
	private static final String LIGHT3_ELEMENT_NAME = "light3";		// Name of the bottom pilot light element in the SCO/model
	private static final String LIGHT4_ELEMENT_NAME = "light4";		// Name of the left pilot light element in the SCO/model
	
	private SceneObjectElement light2;
	private SceneObjectElement light3;
	private SceneObjectElement light4;
	
	public bool onInit(){
		super.SCRIPT_NAME = "PilotLight4Way";		// Script name for debugging
		super.LIGHT_ELEMENT_NAME = "light1";		// Name of the top pilot light element in the SCO/model
		
		// If PilotLight initialization succeeds, continue with self-initialization
		if(super.onInit()){
			// Get/assign other light elements
			light2 = SceneObjectTools.getElementForName(super.sco, LIGHT2_ELEMENT_NAME, SCRIPT_NAME);
			light3 = SceneObjectTools.getElementForName(super.sco, LIGHT3_ELEMENT_NAME, SCRIPT_NAME);
			light4 = SceneObjectTools.getElementForName(super.sco, LIGHT4_ELEMENT_NAME, SCRIPT_NAME);
			// Missing element check
			if (light2 == null || light3 == null || light4 == null) return false;
			
			// Function-specific checks and setup
			switch (func){
				case F_STATIC_OFF:
					handleStaticFunc(super.sco, light, "light1");
					handleStaticFunc(super.sco, light2, "light2");
					handleStaticFunc(super.sco, light3, "light3");
					handleStaticFunc(super.sco, light4, "light4");
					return false;
				case 3: // Block Indicator (4-Way)
					if (coaster.isScriptedOperationMode()){
						System.err.println(SCRIPT_NAME + ": Sorry! The Block Status (4-Way) function does not support Scripted Operation Mode rides at this time.");
						return false;
					}
			}
			
			return true; // Everything's just dandy
		}
		else return false; // Oh noes! Everything's not dandy!
	}

	protected int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;

		int funcVal = sco.getIntegerParameter("function").intValue();
		switch (funcVal){
			case 1: // Block Indicator (4-Way)
				return 3;
			default:
				return F_STATIC_OFF;
		}
		return funcVal;
	}
	
	private void handleStaticFunc(SceneObject sco, SceneObjectElement element, String paramName){
		// Sets the light's state, based on static parameters
		switch (sco.getIntegerParameter(paramName).intValue()){
			case 1:
				element.setTextureAnimationIndex(L_TEX_ON);
				break;
			case 2:
				element.setTextureAnimationIndex(L_TEX_BLINK);
				break;
			default:
				element.setTextureAnimationIndex(L_TEX_OFF);
		}
	}
	
	private final void handleBlockIndicator4WayFunc(){
		if (coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(L_TEX_OFF);
			light2.setTextureAnimationIndex(L_TEX_ON);
			light3.setTextureAnimationIndex(L_TEX_OFF);
			light4.setTextureAnimationIndex(L_TEX_OFF);
		}
		else{
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					light.setTextureAnimationIndex(L_TEX_ON);
					light2.setTextureAnimationIndex(L_TEX_OFF);
					light3.setTextureAnimationIndex(L_TEX_OFF);
					light4.setTextureAnimationIndex(L_TEX_OFF);
					break;
				case Block.STATE_APPROACHING_FWD:
				case Block.STATE_APPROACHING_BWD:
					light.setTextureAnimationIndex(L_TEX_OFF);
					light2.setTextureAnimationIndex(L_TEX_OFF);
					light3.setTextureAnimationIndex(L_TEX_BLINK);
					light4.setTextureAnimationIndex(L_TEX_OFF);
					break;
				case Block.STATE_IDLE:
					light.setTextureAnimationIndex(L_TEX_OFF);
					light2.setTextureAnimationIndex(L_TEX_OFF);
					light3.setTextureAnimationIndex(L_TEX_OFF);
					light4.setTextureAnimationIndex(L_TEX_ON);
					break;
				default:
					light.setTextureAnimationIndex(L_TEX_OFF);
					light2.setTextureAnimationIndex(L_TEX_BLINK);
					light3.setTextureAnimationIndex(L_TEX_OFF);
					light4.setTextureAnimationIndex(L_TEX_OFF);
			}
		}
	}
	
	public void onNextFrame(float tick){
		switch (func){
			case 3: // Block Indicator (4-Way)
				handleBlockIndicator4WayFunc();
				break;
		}
		
		// If set to attach to special track, update translation of SCO
		if (specialTrackModule != null)
			specialTrackModule.updateTranslation();
	}
}