// Pilot Light NL2 Script
// David Wolfe (Red-Thirten)
// 11/8/2020
// Initializes the pilot light's placard and animates the pilot light during run time, based on user settings.
// Licensed under GNU GPLv3 - See LICENSE for more details.

import com.nolimitscoaster.*;

public class PilotLight extends Script{
	protected String SCRIPT_NAME = "PilotLight";		// Script name for debugging
	protected String LIGHT_ELEMENT_NAME = "pilot";		// Name of the pilot light element in the SCO/model
	protected String PLACARD_ELEMENT_NAME = "placard";	// Name of the placard element in the SCO/model
	
	protected String[] MODES = { // Possible mode parameters
		"static",
		"advance",
		"dispatch",
		"platform",
		"e_stop_reset",
		"automatic_mode",
		"full_manual_mode"
	};
	private static final int[] PLATFORM_COASTERS = {2, 4, 6, 14, 21, 22, 24}; // All platform coaster IDs in NL2, as of this file's creation date
	
	protected SceneObject sco;
	protected SceneObjectElement light;
	
    protected Coaster coaster;
    protected Block block;
    private Section section;
	
	private SpecialTrackModule specialTrackLogic;
	
	protected int mode = 0;
	private bool coasterHasPlatform;
	
	
	public bool onInit(){ // On initialization of Play simulation
		sco = getScoFromParentEntity(); // Get and assign local sco
		light = getElementOnScoForName(sco, LIGHT_ELEMENT_NAME); // Get and assign light element
		if (light == null) return false; // Missing element check
		OperatorPlacard.setPlacardTextureFromScoParams( sco, getElementOnScoForName(sco, PLACARD_ELEMENT_NAME) ); // Set placard texture using external class
		mode = getModeFromScoParams(sco);
		
		if (sco.getBooleanParameter("special_track_attach").boolValue()){ // If set to attach to special track, set up the logic object for it
			specialTrackLogic = new SpecialTrackModule(sco, SCRIPT_NAME);
		}
		
		if (mode == 0){
			handleStaticMode(sco);
			return true;
		}
		else{ // If not static mode
			block = sco.getBlockParameter("block");
			if (block != null){ // Get ride details based on block parameter
				coaster = block.getCoaster();
				if (coaster.isScriptedOperationMode()){
					System.err.println(SCRIPT_NAME + ": Sorry! Non-static modes do not support Scripted Operation Mode rides at this time.");
				}
				section = block.getSection();
				coasterHasPlatform = isCoasterWithPlatform(coaster);
				return true;
			}
			else{
				if (!sco.getName().equals("")){
					System.err.println(sco.getName() + ": Block parameter required for any non-static mode.");
				}
				else{
					System.err.println(SCRIPT_NAME + ": Block parameter required for any non-static mode.");
				}
				return false;
			}
		}
	}
	
	private SceneObject getScoFromParentEntity(){ // Returns the SceneObject via the parent entity ID with error handling
        SceneObject sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null){
            System.err.println(SCRIPT_NAME + ": This script only works with NL2 scene objects");
        }
        return sco;
    }
	
	protected SceneObjectElement getElementOnScoForName(SceneObject sco, String name){ // Basically getElementForName() with error handling - Gratz to bestdani for idea
        SceneObjectElement element = sco.getElementForName(name);
        if (element == null){
            System.err.println(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + name + "\" element)");
        }
        return element;
    }
	
	private int getModeFromScoParams(SceneObject sco){ // Returns the mode ID, based on the first MODES-based parameter to be found true
		Boolean curBool = null;
		
		for (int i = 0; i < MODES.length; i++){ // Traverse the MODES array
			curBool = sco.getBooleanParameter( MODES[i] ); // Get the corresponding parameter
			if (curBool != null && curBool.boolValue()){ // Check if it exists, then if it is positive
				return i;
			}
		}
		return 0; // Default to static mode if no mode selection found
	}
	
	private bool isCoasterWithPlatform(Coaster coaster){ // Returns if the given coaster has a platform station, based on the master PLATFORM_COASTERS list
		int coasterID = coaster.getCoasterStyleId();
		for (int i = 0; i < PLATFORM_COASTERS.length; i++){
			if (PLATFORM_COASTERS[i] == coasterID) return true;
		}
		return false;
	}
	
	private void handleStaticMode(SceneObject sco){
		switch (sco.getIntegerParameter("light").intValue()){ // Sets the light's state, based on static parameters
			case 1:
				light.setTextureAnimationIndex(1);
				break;
			case 2:
				light.setTextureAnimationIndex(-1);
				break;
			default:
				light.setTextureAnimationIndex(0);
		}
	}
	
	private void handleAdvanceMode(){
		if (coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(0);
		}
		else{
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					light.setTextureAnimationIndex(1);
					break;
				case Block.STATE_APPROACHING_FWD:
				case Block.STATE_APPROACHING_BWD:
					light.setTextureAnimationIndex(-1);
					break;
				default:
					light.setTextureAnimationIndex(0);
			}
		}
	}
	
	private void handleDispatchMode(){
		if (coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(0);
		}
		else{
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_IN_STATION:
					// If the platform (if applicable) is up, or the harnesses or gates are open, not ready to dispatch (no light)
					if (coasterHasPlatform && section.getStationPlatformState() != 0.f || section.getTrainOnSection().getSpeed() != 0 ||
					section.getTrainOnSection().getHarnessState() != 0.f || section.getStationGateState() != 0.f || section.isStationWaitingForClearBlock()){
						light.setTextureAnimationIndex(0);
					}
					else{ // Otherwise, ready to dispatch (blink light)
						light.setTextureAnimationIndex(-1);
					}
					break;
				case Block.STATE_OCCUPIED:
					light.setTextureAnimationIndex(1);
					break;
				default:
					light.setTextureAnimationIndex(0);
			}
		}
	}
	
	private void handlePlatformMode(){
		if (!coasterHasPlatform || coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(0);
		}
		// If a train is in the station, and the harnesses and gates are closed, and the train isn't moving (ie. entering station)
		else if (block.getNormalModeState(Block.PROTOCOL_V1) == Block.STATE_IN_STATION && section.getTrainOnSection().getSpeed() == 0
		&& section.getTrainOnSection().getHarnessState() == 0.f && section.getStationGateState() == 0.f){
			if (section.getStationPlatformState() == 1 || section.getStationPlatformState() == 0){ // If the platform is fully up or down, blink to show ready state
				light.setTextureAnimationIndex(-1);
			}
			else{ // If the platform is moving, light on
				light.setTextureAnimationIndex(1);
			}
        }
		else{ // Otherwise, light is off
			light.setTextureAnimationIndex(0);
		}
	}
	
	private void handleEStopResetMode(){
		if (coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(-1);
        }
		else{
			light.setTextureAnimationIndex(0);
        }
	}
	
	private void handleAutomaticModeMode(){
		if (block.getNormalModeState(Block.PROTOCOL_V1) == Block.STATE_FULL_MANUAL_MODE || coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(0);
        }
		else{
			light.setTextureAnimationIndex(1);
        }
	}
	
	private void handleFullManualModeMode(){
		if (block.getNormalModeState(Block.PROTOCOL_V1) == Block.STATE_FULL_MANUAL_MODE && !coaster.isEmergencyStop()){
			light.setTextureAnimationIndex(1);
        }
		else{
			light.setTextureAnimationIndex(0);
        }
	}

	public void onNextFrame(float tick){
		switch (mode){
			case 0:
				break;
			case 1:
				handleAdvanceMode();
				break;
			case 2:
				handleDispatchMode();
				break;
			case 3:
				handlePlatformMode();
				break;
			case 4:
				handleEStopResetMode();
				break;
			case 5:
				handleAutomaticModeMode();
				break;
			case 6:
				handleFullManualModeMode();
				break;
			default:
		}
		
		if (specialTrackLogic != null && specialTrackLogic.isAttached()){ // If set to attach to special track, set translation of SCO
			specialTrackLogic.setTranslation();
		}
	}
}