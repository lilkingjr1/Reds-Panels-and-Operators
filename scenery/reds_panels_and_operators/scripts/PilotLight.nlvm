/**
	Pilot Light NL2 Script
	David Wolfe (Red-Thirten)
	03/15/2024
	Animates the pilot light during run time, based on user settings.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.Block;
import com.nolimitscoaster.Section;
import com.nolimitscoaster.SpecialTrack;

import obj.IndicatorLight;
import util.Logger;
import util.SceneObjectTools;
import util.CoasterTools;
import util.SpecialTrackModule;

public class PilotLight extends Script{
	protected String SCRIPT_NAME = "PilotLight";		// Script name for debugging
	protected String LIGHT_ELEMENT_NAME = "pilot";		// Name of the pilot light element in the SCO/model
	protected String LIGHT_OBJECT_NAME = "light";		// Name of the Scene Object Light
	protected String PLACARD_ELEMENT_NAME = "placard";	// Name of the placard element in the SCO/model
	protected float BLINK_INTERVAL = 0.5f;				// Interval, in seconds, of the pilot light changing states when blinking
	
	// All Pilot Light Functions:
	private static final int F_STATIC_OFF = 0;
	private static final int F_STATIC_ON = 1;
	protected static final int F_STATIC_BLINK = 2;
	protected static final int F_BLOCK_IND = 3; // Non-Scripted Coasters Only
	protected static final int F_DISPATCH = 4;
	private static final int F_PLATFORM = 5;
	protected static final int F_SPECIAL_TRACK = 6;
	private static final int F_ESTOP = 7;
	private static final int F_AUTOMATIC_OP = 8;
	private static final int F_SEMI_MAN_OP = 9;
	private static final int F_FULL_MAN_OP = 10;
	
	protected SceneObject sco;
	protected Coaster coaster;
	protected Block block;
	protected Section section;
	private SpecialTrack specialTrack;
	
	protected Logger log;
	protected IndicatorLight light;
	protected SpecialTrackModule specialTrackModule;
	
	protected int func = F_STATIC_OFF;
	
	public bool onInit(){ // On initialization of Play simulation
		// Get and assign local sco
		sco = SceneObjectTools.getSceneObjectForEntityId(
			sim,
			getParentEntityId(),
			SCRIPT_NAME
		);

		// Setup Logger
		log = new Logger(SCRIPT_NAME, sco.getName());

		// Hide placard if configured
		if ( sco.getBooleanParameter("hide_placard") != null
				&& sco.getBooleanParameter("hide_placard").boolValue() ){
			SceneObjectTools.getElementForName(sco, PLACARD_ELEMENT_NAME, SCRIPT_NAME).setVisible(false);
		}
		
		// If set to attach to special track, set up the module object for it
		if (sco.getSpecialTrackParameter("special_track_attach") != null){
			specialTrackModule = new SpecialTrackModule(sco);
		}
		
		// Get configured function and required parameters
		func = getFuncFromScoParams(sco);
		if (func > F_STATIC_BLINK){ // If not static function
			block = sco.getBlockParameter("block");
			if (block == null){ // Check for unconfigured block
				log.err("Block parameter required for any non-static functions.");
				return false;
			}
			
			// Get ride details based on block parameter
			coaster = block.getCoaster();
			if (coaster.isScriptedOperationMode()){
				log.err("Sorry! Non-static functions do not support Scripted Operation Mode rides at this time.");
				return false;
			}
			section = block.getSection();
		}

		// Create IndicatorLight object
		light = new IndicatorLight(
			SceneObjectTools.getElementForName(sco, LIGHT_ELEMENT_NAME, SCRIPT_NAME),
			SceneObjectTools.getLightForName(sco, LIGHT_OBJECT_NAME, SCRIPT_NAME),
			BLINK_INTERVAL,
			!sco.getBooleanParameter("disable_light").boolValue()
		);

		// Function-specific checks and setup
		switch (func){
			// Static functions
			case F_STATIC_OFF:
			case F_STATIC_ON:
				handleStaticFunc(sco);
				return false;
			case F_STATIC_BLINK:
				handleStaticFunc(sco);
				break;
			// Functions that require station section
			case F_PLATFORM:
				// Also requires coaster with platform
				if (!CoasterTools.isCoasterWithPlatform(coaster)){
					log.err("The configured function requires that the coaster have a platform in the station.");
					return false;
				}
			case F_SPECIAL_TRACK:
				specialTrack = sco.getSpecialTrackParameter("special_track");
				if (specialTrack == null){
					log.err("The configured function requires the Special Track parameter to be specified.");
					return false;
				}
				break;
			case F_DISPATCH:
				if (!section.isStation()){
					log.err("The configured function requires the specified block to be a station.");
					return false;
				}
				break;
		}
		
		return true; // Everything's just dandy
	}
	
	protected int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;
		
		return sco.getIntegerParameter("function").intValue();
	}
	
	private void handleStaticFunc(SceneObject sco){
		// Sets the light's state, based on function
		switch (func){
			case F_STATIC_ON:
				light.lightOn();
				break;
			case F_STATIC_BLINK:
				light.lightBlink();
				break;
			default:
				light.lightOff();
		}
	}
	
	private void handleBlockIndicatorFunc(){
		if (coaster.isEmergencyStop()){
			light.lightOff();
		}
		else{
			switch (block.getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					light.lightOn();
					break;
				case Block.STATE_APPROACHING_FWD:
				case Block.STATE_APPROACHING_BWD:
					light.lightBlink();
					break;
				default:
					light.lightOff();
			}
		}
	}
	
	private void handleDispatchFunc(){
		Train train = section.getTrainOnSection();
		// Train on section
		if (!coaster.isEmergencyStop() && train != null){
			// Train is moving
			if (train.getSpeed() != 0.0){
				light.lightOn();
			}
			// Train is not ready to dispatch
			else if ( (CoasterTools.isCoasterWithPlatform(coaster) && section.getStationPlatformState() != 0.f)
					|| train.getHarnessState() != 0.f
					|| section.getStationGateState() != 0.f
					|| section.isStationWaitingForClearBlock() ){
				light.lightOff();
			}
			// Train is ready to dispatch
			else{
				light.lightBlink();
			}
		}
		// Train not on section or E-Stopped
		else{
			light.lightOff();
		}
	}
	
	private void handlePlatformFunc(){
		Train train = section.getTrainOnSection();
		// Train stopped in station
		if ( !coaster.isEmergencyStop()
				&& train != null
				&& train.getSpeed() == 0.0 ){
			// Platform is engaged
			if (section.getStationPlatformState() == 1.f){
				light.lightOn();
			}
			// Platform is disengaged
			else if (section.getStationPlatformState() == 0.f){
				light.lightOff();
			}
			// Platform is moving
			else{
				light.lightBlink();
			}
		}
		// Train not in station or E-Stopped
		else{
			light.lightOff();
		}
	}

	private void handleSpecialTrackFunc(){
		// E-stopped
		if (coaster.isEmergencyStop())
			light.lightOff();
		// Track is moving
		else if (specialTrack.getVisibleSwitchState() % 1.f != 0.f)
			light.lightBlink();
		// Track is not in state 0
		else if (specialTrack.getVisibleSwitchState() != 0.f)
			light.lightOn();
		else
			light.lightOff();
	}
	
	private void handleEStopFunc(){
		if (coaster.isEmergencyStop()){
			light.lightBlink();
		}
		else{
			light.lightOff();
		}
	}
	
	private void handleBlockSystemModeFunc(){
		int targetMode = 0;
		switch (func){
			case F_AUTOMATIC_OP:
				targetMode = Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC;
				break;
			case F_SEMI_MAN_OP:
				targetMode = Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL;
				break;
			case F_FULL_MAN_OP:
				targetMode = Coaster.E_BLOCK_SYSTEM_MODE_FULL_MANUAL;
				break;
		}
		if ( coaster.getBlockSystemMode() == targetMode
				&& !coaster.isEmergencyStop() ){
			light.lightOn();
		}
		else{
			light.lightOff();
		}
	}

	public void onNextFrame(float tick){
		switch (func){
			case F_BLOCK_IND:
				handleBlockIndicatorFunc();
				break;
			case F_DISPATCH:
				handleDispatchFunc();
				break;
			case F_PLATFORM:
				handlePlatformFunc();
				break;
			case F_SPECIAL_TRACK:
				handleSpecialTrackFunc();
				break;
			case F_ESTOP:
				handleEStopFunc();
				break;
			case F_AUTOMATIC_OP:
			case F_SEMI_MAN_OP:
			case F_FULL_MAN_OP:
				handleBlockSystemModeFunc();
				break;
		}

		// Run IndicatorLight object's onNextFrame() as well to animate
		light.onNextFrame(tick);
		
		// If set to attach to special track, update translation of SCO
		if (specialTrackModule != null)
			specialTrackModule.updateTranslation();
	}
}