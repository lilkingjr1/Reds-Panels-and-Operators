/**
	Switch NL2 Script
	David Wolfe (Red-Thirten)
	03/05/2024
	Animates the switch during run time, based on user settings.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.Train;
import com.nolimitscoaster.Block;
import com.nolimitscoaster.Section;
import com.nolimitscoaster.SpecialTrack;
import com.nolimitscoaster.InteractionObject;
import com.nolimitscoaster.InteractionActionListener;
import nlvm.lang.Math;

import obj.OperatorSwitch;
import util.Logger;
import util.SceneObjectTools;
import util.CoasterTools;
import util.SpecialTrackModule;

public class SwitchOperator extends Script implements InteractionActionListener{
	protected String SCRIPT_NAME = "SwitchOperator";	// Script name for debugging
	protected String SWITCH_ELEMENT_NAME = "switch";	// Name of the switch element in the SCO/model
	protected String PLACARD_ELEMENT_NAME = "placard";	// Name of the placard element in the SCO/model
	protected float SWITCH_TRAVEL_TIME = 0.4f;			// Time, in seconds, for the switch to travel ("speed")
	protected float SWITCH_INTERACTION_RADIUS = 0.04f;	// Radius, in meters, of the InteractionObject detection sphere
	private static final float SUN_ELEVATION_LIMIT = (float)Math.toRadians(18.0); // 18 degrees is the default sun angle limit for lights to turn on and off
	
	// All Switch Functions:
	protected static final int F_STATIC = 0;
	protected static final int F_RESTRAINTS = 1;
	protected static final int F_GATES = 2;
	protected static final int F_PLATFORM = 3;
	protected static final int F_SPECIAL_TRACK = 4;
	protected static final int F_DISPATCH_MODE = 5;
	protected static final int F_OP_MODE = 6;
	protected static final int F_NUM_TRAINS_NO_INT = 7;
	protected static final int F_LIFT_JOG_NO_INT = 8;
	protected static final int F_TRANSPORTS_NO_INT = 9;
	protected static final int F_SPECIAL_TRACK_NO_INT = 10;
	protected static final int F_COASTER_LIGHTS_NO_INT = 11;
	private static final int[] NON_INTERACT_MODES = {
		F_NUM_TRAINS_NO_INT,
		F_LIFT_JOG_NO_INT,
		F_TRANSPORTS_NO_INT,
		F_SPECIAL_TRACK_NO_INT,
		F_COASTER_LIGHTS_NO_INT
	};
	
	protected Coaster coaster;
	private Block block;
	private Section section;
	private SpecialTrack specialTrack;
	private InteractionObject iObj;
	
	private Logger log;
	protected OperatorSwitch operatorSwitch;
	private SpecialTrackModule specialTrackModule;
	
	private int func = F_STATIC;
	private int trainCount, trainsLashedToTrack;
	private float binaryState = 0.f; // Helps determine if a "binary" state starts to change to the other value (ie. gates start to close, vice-versa, etc)
	
	public bool onInit(){ // On initialization of Play simulation
		// Get and assign local sco
		SceneObject sco = SceneObjectTools.getSceneObjectForEntityId(
			sim,
			getParentEntityId(),
			SCRIPT_NAME
		);

		// Setup Logger
		log = new Logger(SCRIPT_NAME, sco.getName());

		// Hide placard if configured
		if ( sco.getBooleanParameter("hide_placard").boolValue() ){
			SceneObjectTools.getElementForName(sco, PLACARD_ELEMENT_NAME, SCRIPT_NAME).setVisible(false);
		}
		
		// If set to attach to special track, set up the module object for it
		if (sco.getSpecialTrackParameter("special_track_attach") != null){
			specialTrackModule = new SpecialTrackModule(sco);
		}
		
		// Get configured function and required parameters
		func = getFuncFromScoParams(sco);
		if (func > F_STATIC){ // If not static function
			block = sco.getBlockParameter("block");
			if (block == null){ // Check for unconfigured block
				log.err("Block parameter required for any non-static functions.");
				return false;
			}
			
			// Get ride details based on block parameter
			coaster = block.getCoaster();
			trainCount = coaster.getTrainCount();
			if (coaster.isScriptedOperationMode()){
				log.err("Sorry! Non-static functions do not support Scripted Operation Mode rides at this time.");
				return false;
			}
			section = block.getSection();
		}
		
		// Create OperatorSwitch object
		createSwitchObject(sco, func);
		
		// Function-specific checks and setup
		switch (func){
			// Functions that require station section
			case F_RESTRAINTS:
				// Set initial switch state based on initial train harness state
				Train train = section.getTrainOnSection();
				if (train != null)
					operatorSwitch.setSwitchState((int) train.getHarnessState());
			case F_GATES:
			case F_PLATFORM:
				if (!section.isStation()){
					log.err("The configured function requires the specified block to be a station.");
					return false;
				}
				break;
			// Functions that require Special Track
			case F_SPECIAL_TRACK:
			case F_SPECIAL_TRACK_NO_INT:
				specialTrack = sco.getSpecialTrackParameter("special_track");
				if (specialTrack == null){
					log.err("The configured function requires the Special Track parameter to be specified.");
					return false;
				}
				break;
			// Functions that require lift section
			case F_LIFT_JOG_NO_INT:
				if (!section.isLift()){
					log.err("The configured function requires the specified block to be a lift.");
					return false;
				}
				break;
		}

		// Check for platform (if applicable)
		if (func == F_PLATFORM && !CoasterTools.isCoasterWithPlatform(coaster)){
			log.err("The configured function requires that the coaster have a platform in the station.");
			return false;
		}

		// Setup InteractionObject (if interactible function)
		if (isInteractibleFunc(func)){
			iObj = InteractionObject.createSimpleButton();
			iObj.setPosition(operatorSwitch.getAbsoluteTranslation());
			iObj.setRadius(SWITCH_INTERACTION_RADIUS);
			// iObj.setProcessActionEventsWhenDisabled(true);
			iObj.addActionListener(this);
		}
		
		return true; // Everything's just dandy
	}
	
	protected void createSwitchObject(SceneObject sco, int func){
		/* Create Switch Object
			Creates a new OperatorSwitch object, based on the selected mode.
		*/
		switch (func){
			case F_NUM_TRAINS_NO_INT:
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					trainCount, // States = # of Trains on Track
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME
				);
				break;
			case F_OP_MODE:
			case F_LIFT_JOG_NO_INT:
			case F_TRANSPORTS_NO_INT:
			case F_SPECIAL_TRACK_NO_INT:
			case F_COASTER_LIGHTS_NO_INT:
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					3, // States = BWD/N/FWD, Left/N/Right, or Auto/Maint/Manual
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME
				);
				break;
			default: // Every other mode just has two states
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					2,
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME
				);
		}
	}
	
	private int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;
		
		return sco.getIntegerParameter("function").intValue();
	}

	private bool isInteractibleFunc(int func){
		for (int i = 0; i < NON_INTERACT_MODES.length; i++){
			if (func == NON_INTERACT_MODES[i])
				return false;
		}
		return true;
	}

	// Interactible Functions //
	
	private void handleRestraintsFunc(bool action){
		if (action){
			if (section.isStationManualClosedHarness()){
				section.doStationManualOpenHarness();
			}
			else{
				section.doStationManualCloseHarness();
			}
			return;
		}

		Train train = section.getTrainOnSection();
		if (train == null) return;
		if (train.getHarnessState() > binaryState){
			binaryState = train.getHarnessState();
			operatorSwitch.setSwitchState(0);
		}
		else if (train.getHarnessState() < binaryState){
			binaryState = train.getHarnessState();
			operatorSwitch.setSwitchState(1);
		}
		
		iObj.setEnabled(
			section.canStationManualOpenHarness() || section.canStationManualCloseHarness()
		);
	}
	
	private void handleGatesFunc(bool action){
		if (action){
			if (section.isStationManualClosedGates()){
				section.doStationManualOpenGates();
			}
			else{
				section.doStationManualCloseGates();
			}
			return;
		}

		if (section.getStationGateState() > binaryState){
			binaryState = section.getStationGateState();
			operatorSwitch.setSwitchState(0);
		}
		else if (section.getStationGateState() < binaryState){
			binaryState = section.getStationGateState();
			operatorSwitch.setSwitchState(1);
		}
		
		iObj.setEnabled(
			section.canStationManualOpenGates() || section.canStationManualCloseGates()
		);
	}
	
	private void handlePlatformFunc(bool action){
		if (action){
			if (section.isStationManualEngagedPlatform()){
				section.doStationManualDisengagePlatform();
			}
			else{
				section.doStationManualEngagePlatform();
			}
			return;
		}

		if (section.getStationPlatformState() > binaryState){
			binaryState = section.getStationPlatformState();
			operatorSwitch.setSwitchState(0);
		}
		else if (section.getStationPlatformState() < binaryState){
			binaryState = section.getStationPlatformState();
			operatorSwitch.setSwitchState(1);
		}
		
		iObj.setEnabled(
			section.canStationManualDisengagePlatform() || section.canStationManualEngagePlatform()
		);
	}
	
	private void handleSpecialTrackFunc(bool action){
		if (action){
			if (specialTrack.getSetSwitchDirection() == 0){
				specialTrack.setManualSwitchDirection(1);
			}
			else{
				specialTrack.setManualSwitchDirection(0);
			}
			return;
		}
		
		if (func == F_SPECIAL_TRACK){
			operatorSwitch.setSwitchState(specialTrack.getSetSwitchDirection());
			iObj.setEnabled(specialTrack.canChangeManualSwitchDirection());
		}
		// No interation
		else{
			if (specialTrack.getVisibleSwitchState() < binaryState){
				binaryState = specialTrack.getVisibleSwitchState();
				operatorSwitch.setSwitchState(0);
			}
			else if (specialTrack.getVisibleSwitchState() > binaryState){
				binaryState = specialTrack.getVisibleSwitchState();
				operatorSwitch.setSwitchState(2);
			}
			else operatorSwitch.setSwitchState(1);
		}
	}
	
	private void handleDispatchModeFunc(bool action){
		if (action){
			section.setStationManualDispatchMode(
				!section.isStationManualDispatchMode()
			);
			return;
		}

		if (section.isStationManualDispatchMode()){
			operatorSwitch.setSwitchState(0);
		}
		else{
			operatorSwitch.setSwitchState(1);
		}
	}
	
	private void handleBlockSystemModeFunc(bool action){
		if (action){
			if ( coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC
					&& coaster.canSetBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL) ){
				coaster.setBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL);
			}
			else if ( coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL
					&& coaster.canSetBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC) ){
				coaster.setBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC);
			}
			else if ( coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_FULL_MANUAL
					&& coaster.canSetBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL) ){
				coaster.setBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL);
			}
			return;
		}

		switch (coaster.getBlockSystemMode()){
			case Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC:
				operatorSwitch.setSwitchState(0);
				break;
			case Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL:
				operatorSwitch.setSwitchState(1);
				break;
			default:
				operatorSwitch.setSwitchState(2);
		}
		
		iObj.setEnabled(
			( coaster.getBlockSystemMode() != Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC
				&& coaster.canSetBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_AUTOMATIC) )
			|| ( coaster.getBlockSystemMode() != Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL
				&& coaster.canSetBlockSystemMode(Coaster.E_BLOCK_SYSTEM_MODE_SEMI_MANUAL) )
		);
	}
	
	private void handleNumTrainsFunc(){
		trainsLashedToTrack = 1; // Set to 1 to offset the result by one, because setSwitchState() starts from 0
		for (int i = trainCount - 1; i >= 0; --i){ // Go through all trains
			if (coaster.getTrainAt(i).isLashedToTrack()){ // If it's lashed to track, increase the counter
				trainsLashedToTrack++;
			}
		}
		operatorSwitch.setSwitchState(trainCount - trainsLashedToTrack); // Set the switch state to the number of trains in service, minus 1 (for the offset)
	}
	
	public void handleLiftJogFunc(){
		if (coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_FULL_MANUAL){
			float liftSpeed = (float) section.getLiftCurrentSpeed();
			if (liftSpeed < 0.f && liftSpeed <= binaryState) operatorSwitch.setSwitchState(0);
			else if (liftSpeed > 0.f && liftSpeed >= binaryState) operatorSwitch.setSwitchState(2);
			else operatorSwitch.setSwitchState(1);
			binaryState = liftSpeed;
		}
	}
	
	private void handleTransportsFunc(){
		if (coaster.getBlockSystemMode() == Coaster.E_BLOCK_SYSTEM_MODE_FULL_MANUAL){
			float transSpeed = (float) section.getTransportCurrentSpeed();
			if (transSpeed < 0.f && transSpeed <= binaryState) operatorSwitch.setSwitchState(0);
			else if (transSpeed > 0.f && transSpeed >= binaryState) operatorSwitch.setSwitchState(2);
			else operatorSwitch.setSwitchState(1);
			binaryState = transSpeed;
		}
	}
	
	public void handleCoasterLightsFunc(){
		if (coaster.isEmergencyStop()){
			operatorSwitch.setSwitchState(2);
		}
		else if (sim.getCurSunElevation() <= SUN_ELEVATION_LIMIT){
			operatorSwitch.setSwitchState(1);
		}
		else{
			operatorSwitch.setSwitchState(0);
		}
	}

	private void handleFunc(bool action){
		switch (func){
			case F_RESTRAINTS:
				handleRestraintsFunc(action);
				break;
			case F_GATES:
				handleGatesFunc(action);
				break;
			case F_PLATFORM:
				handlePlatformFunc(action);
				break;
			case F_SPECIAL_TRACK:
			case F_SPECIAL_TRACK_NO_INT:
				handleSpecialTrackFunc(action);
				break;
			case F_DISPATCH_MODE:
				handleDispatchModeFunc(action);
				break;
			case F_OP_MODE:
				handleBlockSystemModeFunc(action);
				break;
			case F_NUM_TRAINS_NO_INT:
				handleNumTrainsFunc();
				break;
			case F_LIFT_JOG_NO_INT:
				handleLiftJogFunc();
				break;
			case F_TRANSPORTS_NO_INT:
				handleTransportsFunc();
				break;
			case F_COASTER_LIGHTS_NO_INT:
				handleCoasterLightsFunc();
				break;
			default:
		}
	}
	
	public void onNextFrame(float tick){
		/*if (Button.isPressed(Button.FLY_SLOWER)){ //DEBUGGING
			operatorSwitch.setSwitchState(0);
		}
		if (Button.isPressed(Button.FLY_FASTER)){ //DEBUGGING
			operatorSwitch.setSwitchState(1);
		}
		if (Button.isPressed(Button.ACTION)){ //DEBUGGING
			operatorSwitch.setSwitchState(2);
		}*/
		handleFunc(false);
		
		// Run switch object's onNextFrame() as well to animate
		operatorSwitch.onNextFrame(tick);
		
		// If set to attach to special track, update SCO translation
		if (specialTrackModule != null)
			specialTrackModule.updateTranslation();
	}

	public void onInteractionAction(InteractionObject obj){
		handleFunc(true);
	}
}