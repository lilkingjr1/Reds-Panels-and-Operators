// Block Display NL2 Script
// bestdani & David Wolfe (Red-Thirten)
// 9/27/2021
// Animates indicator element textures on a pre-configured object, using block zones defined by user parameters, to emulate a block display.
// Original concept and code by bestdani. Modified to be more efficient, and support extending.
// Licensed under GNU GPLv3 - See LICENSE for more details.

import com.nolimitscoaster.Block;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;
import com.nolimitscoaster.Script;
import nlvm.math3d.Vector4f;
import nlvm.util.Vector;

public class BlockDisplay extends Script{
    protected String SCRIPT_NAME = "BlockDisplay";					// Script name for debugging
    private static final String MODEL_INDICATOR_PREFIX = "block_";	// Prefix for all the indicator elements in the SCO/model
    private static final String PARAMETER_BLOCK_PREFIX = "block_";	// Prefix for all the block parameters
    private static final int STATION_COLOR_SLOT = 0;				// User defined color slot used for the station indicator color
    private static final int LIFT_COLOR_SLOT = 1;					// User defined color slot used for the lift indicator color
    private static final int BRAKE_COLOR_SLOT = 2;					// User defined color slot used for the brake indicator color
    protected static final int INDICATOR_COLOR_SLOT = 7;			// User defined color slot used as a variable for changing different element's colors on the fly
	
	protected SceneObject sco;
    protected Block[] blocks;
	
    private Vector4f colorStation = new Vector4f(1.0f, 0.5f, 0.0f, 1.0f);	// Default station indicator color
    private Vector4f colorLift = new Vector4f(0.0f, 1.0f, 0.0f, 1.0f);		// Default lift indicator color
    private Vector4f colorBrake = new Vector4f(1.0f, 0.0f, 1.0f, 1.0f);		// Default brake indicator color
	
	// Array of dynamic arrays (Vectors) of elements. Each element in the master array represents a "block" of elements, representing the blocks on the ride.
    private Vector[] elementsForBlock;
	
    public bool onInit(){ // On initialization of Play simulation
        sco = getScoFromParentEntity(); // Get and assign local sco
		
        SceneObjectElement element0 = getElementOnScoForName(sco, MODEL_INDICATOR_PREFIX + "0"); // Temporarily get an element to read indicator color preferences
        if (element0 != null){ // Assign block type colors via entity parameters
			element0.getEntityColor(STATION_COLOR_SLOT, colorStation);
			element0.getEntityColor(LIFT_COLOR_SLOT, colorLift);
			element0.getEntityColor(BRAKE_COLOR_SLOT, colorBrake);
        }
		else return false;
		
		if (sco.getBlockParameter(PARAMETER_BLOCK_PREFIX + 0) == null){ // Check if required Station block has been set in the parameters
			if (!sco.getName().equals("")){
				System.out.println(sco.getName() + ": Station Block parameter required to be set for block diagram to work.");
				System.out.println("\t(Double click the object in the editor to set block options)");
				return false;
			}
			else{
				System.out.println(SCRIPT_NAME + ": Station Block parameter required to be set for block diagram to work.");
				System.out.println("\t(Double click the object in the editor to set block options)");
				return false;
			}
		}
		
        blocks = assignBlocksFromParameters(sco); // Get blocks from parameters
        elementsForBlock = assignElementsFromBlocksForSco(sco); // Calculate which indicator elements will be assigned to which blocks
        setElementColors(blocks, elementsForBlock); // Set indicator elements' colors based on what type of block they represent
		
        return true; // Everything's just dandy
    }
	
    protected SceneObject getScoFromParentEntity(){ // Returns the SceneObject via the parent entity ID with error handling
        SceneObject sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null){
            System.err.println(SCRIPT_NAME + ": This script only works with NL2 scene objects");
        }
        return sco;
    }
	
	protected SceneObjectElement getElementOnScoForName(SceneObject sco, String name){ // Basically getElementForName() with error handling - Gratz to bestdani for idea
        SceneObjectElement element = sco.getElementForName(name);
        if (element == null){
            System.err.println(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + name + "\" element)");
        }
        return element;
    }
	
    private Block[] assignBlocksFromParameters(SceneObject sco){ // Returns an array of block objects, based on selected block parameters
        Vector collectedBlocks = new Vector();
        int index = 0;
        Block block = sco.getBlockParameter(PARAMETER_BLOCK_PREFIX + index);
        while (block != null){
            collectedBlocks.addElement(block);
            index++;
            block = sco.getBlockParameter(PARAMETER_BLOCK_PREFIX + index);
        }

        Block[] blocks = new Block[collectedBlocks.size()];
        for (int i = 0; i < blocks.length; ++i){
            blocks[i] = (Block) collectedBlocks.elementAt(i);
        }
        return blocks;
    }
	
	// Returns an array of Vectors that represent multiple "blocks" of SCO elements, based on an even split of the blocks set in parameters
    private Vector[] assignElementsFromBlocksForSco(SceneObject sco){
        int elementCount = 0;
        SceneObjectElement element = sco.getElementForName(MODEL_INDICATOR_PREFIX + elementCount);

        Vector elements = new Vector();
        while (element != null){
            elementCount++;
            elements.addElement(element);
            element = sco.getElementForName(MODEL_INDICATOR_PREFIX + elementCount);
        }

        if (blocks.length > elements.size()){
            System.throwRuntimeException("The block display does not support more than " + elements.size() + " blocks.");
        }

        return evenSplit(elements, blocks.length);
    }

    private Vector[] evenSplit(Vector objects, int divisions){ // Returns an array of Vectors, where the passed Vectors are split evenly over a passed number of divisions in the array
        int appendedChunks = 0;
        Vector[] chunks = new Vector[divisions];
        while (objects.size() > 0){
            int chunkSize = (int) round((double) objects.size() / (double) (blocks.length - appendedChunks));
            chunks[appendedChunks] = new Vector();
            for (int i = 0; i < chunkSize; ++i){
                Object object = objects.elementAt(0);
                chunks[appendedChunks].addElement(object);
                objects.removeElement(object);
            }
            appendedChunks++;
        }
        return chunks;
    }
	
    private void setElementColors(Block[] blocks, Vector[] elementsForBlock){ // Sets all the passed elements' colors based on their assigned block type
        for (int i = 0; i < blocks.length; ++i){
            Block block = blocks[i];
            Vector4f color = colorBrake;
            if (block.getSection().isStation()){
                color = colorStation;
            } else if (block.getSection().isLift()){
                color = colorLift;
            }

            setElementsColor(elementsForBlock[i], INDICATOR_COLOR_SLOT, color);
        }
    }

    protected void setElementsColor(Vector elements, int slot, Vector4f color){ // Sets all the passed elements' colors based on the passed/specified color
        for (int i = 0; i < elements.size(); ++i){
            SceneObjectElement element = (SceneObjectElement) elements.elementAt(i);
            element.setEntityColor(slot, color);
        }
    }

    private double round(double value){ // Simple rounding function
        double floor = Math.floor(value);
        if (value - floor > 0.5){
            return Math.ceil(value);
        } else {
            return floor;
        }
    }

    public void onNextFrame(float tick){
        for (int curBlock = blocks.length-1; curBlock >= 0; --curBlock){ // Counts backwards through the blocks (for efficiency) and sets the block indicators "light" state
            switch (blocks[curBlock].getNormalModeState(Block.PROTOCOL_V1)){
				case Block.STATE_OCCUPIED:
				case Block.STATE_IN_STATION:
					setElementsTextureAnimation(elementsForBlock[curBlock], 1);
					break;
                case Block.STATE_IDLE:
					setElementsTextureAnimation(elementsForBlock[curBlock], 0);
                    break;
                default:
					setElementsTextureAnimation(elementsForBlock[curBlock], -1);
                    break;
            }
        }
    }

    private void setElementsTextureAnimation(Vector elements, int textureIndex){ // Bulk setTextureAnimationIndex() function for many elements
        for (int i = elements.size()-1; i >= 0 ; --i){
            ((SceneObjectElement) elements.elementAt(i)).setTextureAnimationIndex(textureIndex);
        }
    }
}