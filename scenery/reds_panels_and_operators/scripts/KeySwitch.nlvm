// Key Switch NL2 Script
// David Wolfe (Red-Thirten)
// 9/27/2021
// Extends Switch Operator. Initializes the key switch's placard and animates the switch & key during run time, based on user settings.
// Licensed under GNU GPLv3 - See LICENSE for more details.

import com.nolimitscoaster.SceneObject;

import util.OperatorSwitch;

public class KeySwitch extends SwitchOperator{
	private static final String KEY_ELEMENT_NAME = "key";	// Name of the key element in the SCO/model
	private static final float KEY_TRAVEL_DIST = 0.04f;		// Distance the key travels out of the switch, in meters
	
	
	public bool onInit(){ // On initialization of Play simulation		
		super.SCRIPT_NAME = "KeySwitch";		// Script name for debugging
		super.SWITCH_ELEMENT_NAME = "key_core";	// Name of the switch element in the SCO/model
		super.PLACARD_ELEMENT_NAME = "placard";	// Name of the placard element in the SCO/model
		super.SWITCH_TRAVEL_TIME = 0.6f;		// Time, in seconds, for the switch to travel ("speed")
		
        return super.onInit();					// Run the rest of the init code in SwitchOperator
	}
	
	protected void createSwitchObject(SceneObject sco){ // Overrides the base method to handle the key when creating the operatorSwitch object.
		switch (mode){
			case 4: // Trains in Service mode
				operatorSwitch = new OperatorSwitch(
					getElementOnScoForName(sco, SWITCH_ELEMENT_NAME),
					coaster.getTrainCount(), // States = # of Trains on Track
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					getElementOnScoForName(sco, KEY_ELEMENT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				break;
			case 5: // Transports mode
			case 6: // Special Track mode
			case 9: // Manual Lift Jog mode
				operatorSwitch = new OperatorSwitch(
					getElementOnScoForName(sco, SWITCH_ELEMENT_NAME),
					3, // States = BWD/N/FWD or Left/N/Right
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					getElementOnScoForName(sco, KEY_ELEMENT_NAME),
					KEY_TRAVEL_DIST,
					true
				);
				break;
			case 7: // Maintenance mode
				operatorSwitch = new OperatorSwitch(
					getElementOnScoForName(sco, SWITCH_ELEMENT_NAME),
					2,
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					getElementOnScoForName(sco, KEY_ELEMENT_NAME),
					KEY_TRAVEL_DIST,
					true
				);
				break;
			case 8: //Lights mode
				operatorSwitch = new OperatorSwitch(
					getElementOnScoForName(sco, SWITCH_ELEMENT_NAME),
					3, // States = Off/Running/Emergency
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					getElementOnScoForName(sco, KEY_ELEMENT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				break;
			default: // Static mode, or other
				operatorSwitch = new OperatorSwitch(
					getElementOnScoForName(sco, SWITCH_ELEMENT_NAME),
					2,
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					getElementOnScoForName(sco, KEY_ELEMENT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				if (!sco.getBooleanParameter("hide_key").boolValue() && mode == 0) operatorSwitch.setKeyVisible();
		}
	}
}