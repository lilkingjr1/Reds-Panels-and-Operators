/**
	Key Switch NL2 Script
	David Wolfe (Red-Thirten)
	03/05/2024
	Extends Switch Operator. Animates the switch & key during run time, based on user settings.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.SceneObject;

import obj.OperatorSwitch;
import util.SceneObjectTools;

public class KeySwitch extends SwitchOperator{
	private static final String KEY_ELEMENT_NAME = "key";	// Name of the key element in the SCO/model
	private static final float KEY_TRAVEL_DIST = 0.04f;		// Distance the key travels out of the switch, in meters
	
	
	public bool onInit(){ // On initialization of Play simulation		
		super.SCRIPT_NAME = "KeySwitch";		// Script name for debugging
		super.SWITCH_ELEMENT_NAME = "key_core";	// Name of the switch element in the SCO/model
		super.SWITCH_TRAVEL_TIME = 0.6f;		// Time, in seconds, for the switch to travel ("speed")
		
        return super.onInit();					// Run the rest of the init code in SwitchOperator
	}

	protected int getFuncFromScoParams(SceneObject sco){
		/* Get Function from SCO Parameters
			Returns the proper function number based on the "function" parameter enumeration.
		*/
		if (sco.getIntegerParameter("function") == null) return 0;

		int funcVal = sco.getIntegerParameter("function").intValue();
		switch (funcVal){
			case 1: // Special Track (Toggle Only)
				return F_SPECIAL_TRACK;
			case 2: // Dispatch Mode
				return F_DISPATCH_MODE;
			case 3: // Operation Mode
				return F_OP_MODE;
			case 4: // Trains In Service (No Interaction)
				return F_NUM_TRAINS_NO_INT;
			case 5: // Lift Jog (No Interaction)
				return F_LIFT_JOG_NO_INT;
			case 6: // Transports (No Interaction)
				return F_TRANSPORTS_NO_INT;
			case 7: // Special Track (No Interaction)
				return F_SPECIAL_TRACK_NO_INT;
			case 8: // Coaster Lights (No Interaction)
				return F_COASTER_LIGHTS_NO_INT;
			default:
				return F_STATIC;
		}
		return funcVal;
	}
	
	protected void createSwitchObject(SceneObject sco, int func){
		/* Create Switch Object
			Overrides the base method to handle the key when creating the operatorSwitch object.
		*/
		switch (func){
			case F_NUM_TRAINS_NO_INT:
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					trainCount, // States = # of Trains on Track
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					SceneObjectTools.getElementForName(sco, KEY_ELEMENT_NAME, SCRIPT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				break;
			case F_OP_MODE:
			case F_LIFT_JOG_NO_INT:
			case F_TRANSPORTS_NO_INT:
			case F_SPECIAL_TRACK_NO_INT:
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					3, // States = BWD/N/FWD or Left/N/Right
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					SceneObjectTools.getElementForName(sco, KEY_ELEMENT_NAME, SCRIPT_NAME),
					KEY_TRAVEL_DIST,
					true
				);
				break;
			case F_COASTER_LIGHTS_NO_INT:
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					3, // States = Off/Running/Emergency
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					SceneObjectTools.getElementForName(sco, KEY_ELEMENT_NAME, SCRIPT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				break;
			default: // Every other function just has two states & key stays out
				operatorSwitch = new OperatorSwitch(
					SceneObjectTools.getElementForName(sco, SWITCH_ELEMENT_NAME, SCRIPT_NAME),
					2,
					sco.getDoubleParameter("start_angle").floatValue(),
					sco.getDoubleParameter("end_angle").floatValue(),
					SWITCH_TRAVEL_TIME,
					SceneObjectTools.getElementForName(sco, KEY_ELEMENT_NAME, SCRIPT_NAME),
					KEY_TRAVEL_DIST,
					false
				);
				if (func == F_STATIC && !sco.getBooleanParameter("hide_key").boolValue()) operatorSwitch.setKeyVisible();
		}
	}
}