/**
	Anemometer NL2 Script
	David Wolfe (Red-Thirten)
	12/7/2020
	Animates the anemometer to spin relative to the simulator's active wind speed.
	Licensed under GNU GPLv3 - See LICENSE for more details.
*/

import com.nolimitscoaster.Script;
import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.SceneObjectElement;

public class Anemometer extends Script{
	private static final String SCRIPT_NAME = "Anemometer";				// Script name for debugging
	private static final String ANEMOMETER_ELEMENT_NAME = "anemometer";	// Name of the anemometer element in the SCO/model
	private static final float MAX_SPEED = 4.f;							// Rotations per second at max wind speed
	private static final float MAX_WIND_SPEED = 34.75187f;				// NL2's static max wind speed (m/s)
	
	private SceneObjectElement anemometer;
	
	private float radRotation = 0.f;
	
	public bool onInit(){ // On initialization of Play simulation
		SceneObject sco = getScoFromParentEntity(); // Get and assign local sco
		
		anemometer = getElementOnScoForName(sco, ANEMOMETER_ELEMENT_NAME); // Get and assign anemometer element
		if (anemometer == null) return false; // Missing element check
		
		return true; // Everything's just dandy
	}
	
	private SceneObject getScoFromParentEntity(){ // Returns the SceneObject via the parent entity ID with error handling
        SceneObject sco = sim.getSceneObjectForEntityId(getParentEntityId());
        if (sco == null){
            System.err.println(SCRIPT_NAME + ": This script only works with NL2 scene objects");
        }
        return sco;
    }
	
	protected SceneObjectElement getElementOnScoForName(SceneObject sco, String name){ // Basically getElementForName() with error handling - Gratz to bestdani for idea
        SceneObjectElement element = sco.getElementForName(name);
        if (element == null){
            System.err.println(SCRIPT_NAME + ": Wrong 3d model loaded (Cannot find \"" + name + "\" element)");
        }
        return element;
    }
	
	public void onNextFrame(float tick){
		if (radRotation >= 2.f * (float) Math.PI){ // If a full rotation has occurred, reset radRotation back to 0
			radRotation = 0.f;
		}
		// Update the rotation equal to [max speed * time passed * full circle rad amount * (ratio of the current wind speed over the max wind speed)]
		radRotation += MAX_SPEED * tick * 2.f * (float) Math.PI * sim.getCurWindSpeed() / MAX_WIND_SPEED;
		// Set the rotation
		anemometer.setRotation(0.f, radRotation, 0.f);
	}
}