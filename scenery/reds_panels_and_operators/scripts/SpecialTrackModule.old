// Special Track Module NL2 Script
// David Wolfe (Red-Thirten)
// 12/11/2020
// A Java object representing a logic entity that will attach a given SCO to a specified coaster Special Track during run time, relative to where it was placed initially.
// Licensed under GNU GPLv3 - See LICENSE for more details.

import com.nolimitscoaster.SceneObject;
import com.nolimitscoaster.Coaster;
import com.nolimitscoaster.SpecialTrack;
import com.nolimitscoaster.Block;
import nlvm.math3d.Vector3f;

public class SpecialTrackModule{	
	private SceneObject sco;
	private SpecialTrack specialTrack;
	private Vector3f translationFromSpecialTracktoSCO;
	
	private float curSwitchState;
	private bool attached;
	
	public SpecialTrackModule(SceneObject sco, String scriptName){ // Default object constructor
		this.sco = sco; // Assign SCO
		Block block = sco.getBlockParameter("block");
		String scoName = sco.getName();
		
		attached = sco.getBooleanParameter("special_track_attach").boolValue();
		
		if (scoName.equals("")){ // Check if the user forgot to type the Special Track name
			System.err.println(scriptName + ": Object name must be set to the name of the Special Track you want this to animate or attach to.");
		}
		else{
			if (block != null){ // Check if the user properly set the block
				Coaster coaster = block.getCoaster();
				specialTrack = coaster.getSpecialTrack(scoName);
				if (specialTrack != null){ // Check if the Special Track could not be found
					translationFromSpecialTracktoSCO = new Vector3f( sco.getTranslation() ); // Get the SCO's translation
					translationFromSpecialTracktoSCO.sub( specialTrack.getMoveableBranchMatrix(0).getTrans() ); // Subtract the Special Track's translation to get the translation between the two
					
					curSwitchState = specialTrack.getVisibleSwitchState();
				}
				else{
					System.err.println(scriptName + ": Could not find Special Track by the name \"" + scoName + "\" on " + coaster.getName() +
					".\n\tCheck spelling, and make sure you are using the Special Track's module name; NOT the brake section's name.");
				}
			}
			else{
				System.err.println(scriptName + ": Block parameter required for Special Track mode or attachment.");
			}
		}
	}
	
	public bool isAttached(){
		return attached;
	}
	
	public int getState(){ // Returns the switch-equivalent state of the Special Track (0 = Moving Left, 1 = Neutral, 2 = Moving Right)
		if (specialTrack.getVisibleSwitchState() < curSwitchState){
			curSwitchState = specialTrack.getVisibleSwitchState();
			return 0;
		}
		else if (specialTrack.getVisibleSwitchState() > curSwitchState){
			curSwitchState = specialTrack.getVisibleSwitchState();
			return 2;
		}
		else return 1;
	}
	
	public void setTranslation(){ // Sets the translation of the SCO relative to the Special Track's current location (translation)
		Vector3f scoTranslation = new Vector3f( specialTrack.getMoveableBranchMatrix(0).getTrans() );
		scoTranslation.add(translationFromSpecialTracktoSCO);
		sco.setTranslation(scoTranslation);
	}
}